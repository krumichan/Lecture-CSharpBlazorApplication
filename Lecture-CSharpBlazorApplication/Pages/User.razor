@page "/user"

@using Lecture_CSharpBlazorApplication.Data; 


<h3>Online Users</h3>

<p>
    Users: <b>@_users.Count</b>
</p>
<br />

<ul calss="list-group">
    @foreach (UserData user in _users)
    {
        <li @key="user" class="list-group-item">
            <button type="button" class="btn btn-link" @onclick="(() => KickUser(user))">[Kick]</button>
            <label>@user.Name</label>
        </li>
    }
</ul>
<br />

<div class="container">
    <div class="row">
        <div class="col">
            <input class="form-control" placeholder="Add User" @bind-value="_inputName" />
        </div>
        <div class="col">
            <!-- 속성(attribute)에도 binding 가능  : class="@_btnClass" -->
            <!-- conditional attribute 자체에 조건 추가 가능  : disabled="@(_users.Count() >= 5)"-->
            <button class="@_btnClass" type="button" @onclick="AddUser" disabled="@(_users.Count() >= 5)">Add a User</button>
        </div>
    </div>
</div>

@code {
    List<UserData> _users = new List<UserData>();
    string _inputName;

    string _btnClass = "btn btn-primary";

    // page 호출 시, 호출되는 함수.
    // Unity로 따지면 Start() 같은 함수.
    protected override void OnInitialized()
    {
        _users.Add(new UserData() { Name = "Jongseon" });
        _users.Add(new UserData() { Name = "Jongwon" });
        _users.Add(new UserData() { Name = "Alrisia" });
        RefreshButton();
    }

    void AddUser()
    {
        _users.Add(new UserData() { Name = _inputName });
        _inputName = "";
        RefreshButton();
    }

    void KickUser(UserData user)
    {
        _users.Remove(user);
        RefreshButton();
    }

    void RefreshButton()
    {
        if (_users.Count % 2 == 0)
        {
            _btnClass = "btn btn-primary";
        }
        else
        {
            _btnClass = "btn btn-secondary";
        }
    }
}
